/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ihm;

import Exceptions.CodeAeroportException;
import Exceptions.InvalidHourException;
import Exceptions.InvalidLineFormatException;
import Exceptions.InvalidMinuteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ListeAeroport;
import model.ListeVol;
import model.Vol;
import view.GrapheMapFrance;
import view.MyAbstractTable;

/**
 * JFrame qui représente le tableau de bord des vols. Ce tableau de bord affiche
 * une liste de vols à partir des données extraites, permettant à l'utilisateur
 * de visualiser et de gérer les vols disponibles.
 * <p>
 * Les variables d'instance de cette classe sont les suivantes :
 * </p>
 * <ul>
 * <li>{@code mainWindow} : Fenêtre principale à partir de laquelle le tableau
 * de vol est ouvert.</li>
 * <li>{@code listeVol} : Liste des vols chargée à partir des données
 * extraites.</li>
 * <li>{@code listeAeroport} : Liste des aéroports disponibles pour affichage et
 * sélection.</li>
 * <li>{@code model} : Modèle de tableau abstrait utilisé pour afficher les
 * données des vols.</li>
 * <li>{@code mapFrance} : Instance de la carte de France utilisée ou pouvant
 * être utilisée dans le tableau de vol.</li>
 * </ul>
 *
 * @author Mejdi,Zakary et Amadis
 */
public class TableauVol extends javax.swing.JFrame {

    FenetrePrincipale mainWindow; // Fenêtre principale à partir de laquelle le tableau de vol est ouvert
    private final ListeVol listeVol; // Liste des vols chargée à partir des données extraites
    ListeAeroport listeAeroport; // Liste des aéroports disponibles pour affichage et sélection
    private final MyAbstractTable model; // Modèle de tableau abstrait utilisé pour afficher les données des vols
    private AfficherCarteFrance mapFrance; // Instance de la carte de France utilisée ou pouvant être utilisée dans le tableau de vol

    /**
     * Constructeur de la classe TableauVol. Initialise le tableau de bord des
     * vols en récupérant les données des vols à partir de la fenêtre
     * principale, puis peuple le tableau avec ces données.
     *
     * @param mainWindow Fenêtre principale à partir de laquelle le tableau de
     * bord des vols est ouvert.
     * @throws InvalidHourException Si une heure invalide est détectée lors de
     * l'extraction des vols.
     * @throws InvalidMinuteException Si une minute invalide est détectée lors
     * de l'extraction des vols.
     * @throws InvalidLineFormatException Si le format d'une ligne de données de
     * vol est invalide.
     */
    public TableauVol(FenetrePrincipale mainWindow) throws InvalidHourException, InvalidMinuteException, InvalidLineFormatException {
        initComponents();
        this.mainWindow = mainWindow;
        listeAeroport = mainWindow.getListeAeroport();
        listeVol = mainWindow.getListeVol();
        model = new MyAbstractTable(listeVol);
        remplissageTable();
        jTable1.setModel(model);
    }
    //-----------------------------------------------------------------------Getter--------------------------------------------------------------------

    /**
     * Renvoie la liste des aéroports disponibles dans le tableau de bord des
     * vols.
     *
     * @return La liste des aéroports disponibles.
     */
    public ListeAeroport getListeAeroport() {
        return listeAeroport;
    }

    //-----------------------------------------------------------------------Méthode--------------------------------------------------------------------
    /**
     * Remplit le tableau de bord des vols avec les données des vols extraites.
     */
    private void remplissageTable() {
        for (int i = 0; i < listeVol.getListeVol().size(); i++) {
            Vol vol = listeVol.accesVol(i);
            model.addVol(vol);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(18, 18, 57));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ihm/Image/retour.png"))); // NOI18N
        jButton7.setPreferredSize(new java.awt.Dimension(39, 39));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(18, 18, 57));
        jTable1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "NUMERO", "DEPART", "ARRIVEE", "HEURE DEPART", "MINUTE DEPART", "DUREE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(72, 72, 128));
        jButton1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Modifier");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(72, 72, 128));
        jButton2.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Supprimer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(72, 72, 128));
        jButton3.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Ajouter");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(72, 72, 128));
        jButton4.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Afficher MapFrance");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jButton4)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //-----------------------------------------------------------------------Action--------------------------------------------------------------------
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        ChargerListeVol chargerListe = new ChargerListeVol(mainWindow);
        chargerListe.updateLabel();
        chargerListe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        TabDialog dialog = new TabDialog(this, true);
        String reponse = dialog.showDialog();

        String numVol = dialog.getNumVol();
        String codeDepart = dialog.getCodeDepart();
        String codeArriver = dialog.getCodeArriver();

        int heureDepHeure = dialog.getHeureDepHeure();

        int heureDepMinute = dialog.getHeureDepMinute();
        int dureeVol = dialog.getDureeVol();

        if (reponse.equals("valider") && numVol != null && codeDepart != null && codeArriver != null && heureDepHeure < 24 && heureDepHeure > 0 && heureDepMinute > 0 && heureDepMinute < 60 && dureeVol > 0) {
            Vol vol = new Vol(numVol, codeDepart, codeArriver, heureDepHeure, heureDepMinute, dureeVol);
            model.addVol(vol);
            listeVol.ajVol(vol);
            mainWindow.setListeVol(listeVol);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int nbLigne = jTable1.getSelectedRow();
        if (nbLigne > 0) {
            String numVol = (String) model.getValueAt(nbLigne, 0);
            String codeDepart = (String) model.getValueAt(nbLigne, 1);
            String codeArriver = (String) model.getValueAt(nbLigne, 2);

            int heureDepHeure = (Integer) model.getValueAt(nbLigne, 3);
            int heureDepMinute = (Integer) model.getValueAt(nbLigne, 4);
            int dureeVol = (Integer) model.getValueAt(nbLigne, 5);

            TabDialog dialog = new TabDialog(this, rootPaneCheckingEnabled);
            dialog.setNumVol(numVol);
            dialog.setCodeDepart(codeDepart);
            dialog.setCodeArriver(codeArriver);
            dialog.setHeureDepHeure(heureDepHeure);
            dialog.setHeureDepMinute(heureDepMinute);
            dialog.setDureeVol(dureeVol);
            String reponse = dialog.showDialog();

            String newNumVol = dialog.getNumVol();
            String newCodeDepart = dialog.getCodeDepart();
            String newCodeArriver = dialog.getCodeArriver();

            int newHeureDepHeure = dialog.getHeureDepHeure();

            int newHeureDepMinute = dialog.getHeureDepMinute();
            int newDureeVol = dialog.getDureeVol();
            if (reponse.equals("valider") && newNumVol != null && newCodeDepart != null && newCodeArriver != null && newHeureDepHeure < 24 && newHeureDepHeure > 0 && newHeureDepMinute > 0 && newHeureDepMinute < 60 && newDureeVol > 0) {
                //On change dans le model
                if (!(newCodeDepart.equals(newCodeArriver))) {
                    model.setValueAt(newNumVol, nbLigne, 0);
                    model.setValueAt(newCodeDepart, nbLigne, 1);
                    model.setValueAt(newCodeArriver, nbLigne, 2);
                    model.setValueAt(newHeureDepHeure, nbLigne, 3);
                    model.setValueAt(newHeureDepMinute, nbLigne, 4);
                    model.setValueAt(newDureeVol, nbLigne, 5);

                    //Puis dans le vol en lui-même
                    Vol vol = listeVol.accesVol(nbLigne);
                    vol.setNumero(newNumVol);
                    vol.setArrivee(newCodeArriver);
                    vol.setDepart(newCodeDepart);
                    vol.setHeureDepartHeure(newHeureDepHeure);
                    vol.setHeureDepartMinute(newHeureDepMinute);
                    vol.setDuree(newDureeVol);
                    mainWindow.setListeVol(listeVol);
                } else {
                    JOptionPane.showMessageDialog(this, "Attention vous avez renseigné un vol dont le départ et l'arrivée sont identiques", "Warning", JOptionPane.ERROR_MESSAGE);

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sélectionnez une ligne à modifier");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        Vol vol = model.getVol(selectedRow);
        if (selectedRow >= 0) {
            model.deleteVol(vol);
            listeVol.supVol(vol);
            mainWindow.setListeVol(listeVol);
        } else {
            JOptionPane.showMessageDialog(this, "Sélectionnez une ligne à supprimer");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int indice = jTable1.getSelectedRow();
        if (indice < 0) {
            JOptionPane.showMessageDialog(this, "Sélectionnez une ligne à afficher");
        }
        Vol vol = model.getVol(indice);
        ListeVol listePourMap = new ListeVol();
        listePourMap.ajVol(vol);
        try {
            mapFrance = new AfficherCarteFrance(mainWindow);
        } catch (InvalidHourException | InvalidMinuteException | InvalidLineFormatException | CodeAeroportException ex) {
            Logger.getLogger(TableauVol.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            mapFrance.getjPanel2().add(new GrapheMapFrance(listePourMap, listeAeroport, -1, 0, "All"));
        } catch (CodeAeroportException ex) {
            Logger.getLogger(TableauVol.class.getName()).log(Level.SEVERE, null, ex);
        }
        mapFrance.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
